1. Create new droplet in digitalOcean

- Select the minimun size required

- Select the best datacenter
http://speedtest-tor1.digitalocean.com/

- On the first line, enter ssh-rsa.
- Make sure you add one space after ssh-rsa
-When you copy/paste the key into the Key textbox it should preserve the \n characters (x0A). If you are using Notepad on Windows, you won't see these new lines until you copy the text to Github.



- Use SSH key 
https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/create-with-putty/
- Use strong password (paraphrase) to encript key

138.68.181.107


2. Access using SSH (Putty) and update the server

- key:DigitalOcean_CB,

sudo apt-get update

sudo apt-get upgrade


3. Create Swap Space on Ubuntu 20.04 (Increasing virtual RAM)
https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-20-04
https://devanswers.co/creating-swap-space-ubuntu-18-04/

swapon --show

sudo fallocate -l 7G /swapfile
ls -lh /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile

echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

sudo sysctl vm.swappiness=10
sudo sysctl vm.vfs_cache_pressure=50

sudo nano /etc/sysctl.conf
- Add this to the bottom of /etc/sysctl.conf
vm.swappiness=10
vm.vfs_cache_pressure=50

swapon --show


4. Create a new user, set firewall, copy ssh and allow FTP.

- https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04

sudo adduser kblancov

usermod -aG sudo kblancov

ufw allow OpenSSH

ufw enable

- copy the shh key that was used to setup the server under root

rsync --archive --chown=kblancov:kblancov ~/.ssh /home/kblancov

sudo adduser kblancov www-data
sudo chmod g+rwX -R /var/www
sudo ln -s /var/www /home/kblancov/

reboot

5. Setup Acess using SSH (Putty) and FTP (Fillezilla)

Putty

 -> Connection -> Auth -> Browse for SSK private key file
 -> Connection -> Data -> Auto-login username: kblancov
 -> Session, set Ip, Set name and save.
 
FileZilla
 -> File -> Site Manager -> New Site
 Protocol SFTP, Host IP, Port: 22, Logon Type: Key file, User, KeyFile.


6.  Install Apache and configure a Virtual Host

https://www.digitalocean.com/community/tutorials/how-to-install-the-apache-web-server-on-ubuntu-20-04

sudo apt update
sudo apt install apache2

sudo ufw app list
sudo ufw allow in "Apache Full"
sudo ufw status

sudo systemctl status apache2

test: http://138.68.181.107

- Add two A records to agiledisk.com domain @, www. to the IP.

- Configure the virtual host
sudo mkdir /var/www/agiledisk.com
sudo chown -R $USER:$USER /var/www/agiledisk.com

sudo chmod -R 755 /var/www/agiledisk.com

sudo nano /var/www/agiledisk.com/index.html

- Paste this content:

<html>
    <head>
        <title>Welcome to Agile Disk</title>
    </head>
    <body>
        <h1>Success!  The Agile Disk virtual host is working!</h1>
		<h3> We are building something great for you!!! </h3>
    </body>
</html>

- Create a virtual host file 

sudo nano /etc/apache2/sites-available/agiledisk.com.conf

- Paste this content:

<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName agiledisk.com
    ServerAlias www.agiledisk.com
    DocumentRoot /var/www/agiledisk.com
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
	
	<Directory /var/www/agiledisk.com/>
    AllowOverride All
	</Directory>
	
</VirtualHost>

- Enable the file with the a2ensite tool:

sudo a2ensite agiledisk.com.conf

sudo a2dissite 000-default.conf

sudo apache2ctl configtest


sudo systemctl restart apache2

- Enable mod_rewrite so that we can utilize the WordPress permalink feature:

sudo a2enmod rewrite

sudo apache2ctl configtest

- Add a ServerName directive to your main (global) Apache configuration file

sudo nano /etc/apache2/apache2.conf

ServerName 138.68.181.107

- For the json error: Editing /etc/apache2/apache2.conf and changing

AllowOverride None
to
AllowOverride All for /var/www.


sudo apache2ctl configtest

sudo systemctl restart apache2



7.  Secure Apache with Let's Encrypt

https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04

sudo apt install certbot python3-certbot-apache

sudo nano /etc/apache2/sites-available/agiledisk.com.conf

sudo systemctl reload apache2

sudo ufw status

- Get an SSL certificate

sudo certbot --apache

Response:

Congratulations! You have successfully enabled https://agiledisk.com and
https://www.agiledisk.com

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=agiledisk.com
https://www.ssllabs.com/ssltest/analyze.html?d=www.agiledisk.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/agiledisk.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/agiledisk.com/privkey.pem
   Your cert will expire on 2021-07-26. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

   
sudo systemctl status certbot.timer

sudo certbot renew --dry-run

-- Files stored at: /etc/letsencrypt/live/agiledisk.com

sudo chown -R kblancov /etc/letsencrypt



8. Install MySQL, create WP_DB and a user.
https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04

sudo apt install mysql-server

sudo mysql_secure_installation

root_pass: Alfeios051182!

sudo mysql

CREATE DATABASE algo_db DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;


CREATE USER 'algoTrader'@'%' IDENTIFIED WITH mysql_native_password BY 'queenAlgo2021!';

GRANT ALL ON algo_db.* TO 'algoTrader'@'%';

FLUSH PRIVILEGES;

exit

mysql -u algoTrader -p

show databases;



9. Installing PHP

sudo apt update

sudo apt install php libapache2-mod-php php-mysql

sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip

sudo systemctl restart apache2

php -v

sudo nano /var/www/agiledisk.com/info.php

<?php
echo "<h1>Success!  The Agile Disk PHP server is working!</h1>
		<h3> We are building something awesome for you!!! </h3>";
?>

https://agiledisk.com/info.php

# sudo rm /var/www/agiledisk.com/info.php

sudo nano  /etc/php/7.4/apache2/php.ini

upload_max_filesize = 200M

sudo service apache2 restart


10. Install Miconda and Data Science
https://www.digitalocean.com/community/tutorials/how-to-install-the-anaconda-python-distribution-on-ubuntu-20-04
https://medium.com/dunder-data/anaconda-is-bloated-set-up-a-lean-robust-data-science-environment-with-miniconda-and-conda-forge-b48e1ac11646#:~:text=The%20Miniconda%20distribution%20packages%20together,tenth%20the%20size%20of%20Anaconda.

sudo wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh
conda list

conda search "^python$"

conda update conda

conda install -y jupyter

conda install -y jupyterlab

conda install -y numpy

conda install -y pytables

conda install -y pandas

conda install -y scipy

conda install -y  matplotlib

conda install -y seaborn

conda install -y quantdl

conda install -y scikit-learn

conda install -y openpyxl

conda install -y xlrd xlwt

conda install -y pyaml


pip install --upgrade pip

pip install q

pip install plotly

pip install cufflinks

pip install tensorflow

pip install keras

pip3 install SQLAlchemy

pip install eikon

pip install git+git://github.com/yhilpisch/tpqoa


11. Set Up a JupyterLab Environment

https://www.digitalocean.com/community/tutorials/how-to-set-up-a-jupyterlab-environment-on-ubuntu-18-04

conda activate base


jupyter notebook --generate-config

jupyter lab password

jupyter server password


nano /home/kblancov/.jupyter/jupyter_server_config.json


  "sha1:c1dcf60b5cce:c2726d8d75f27c82839cd20ebc2692c552f9f398"

conda deactivate

nano /home/kblancov/.jupyter/jupyter_notebook_config.py

- Make these changes:

...

c.NotebookApp.certfile = '/etc/letsencrypt/live/agiledisk.com/fullchain.pem'

c.NotebookApp.keyfile = '/etc/letsencrypt/live/agiledisk.com/privkey.pem'

c.NotebookApp.ip = '*'

c.NotebookApp.open_browser = False

c.NotebookApp.password = 'sha1:c1dcf60b5cce:c2726d8d75f27c82839cd20ebc2692c552f9f398'

c.NotebookApp.port = 9000

sudo ufw allow 9000


sudo chmod 750 -R /etc/letsencryp

sudo chown kblancov:kblancov -R /etc/letsencrypt


12. Running JupyterLab and Setting Up a systemd Service

conda activate base

jupyter lab


--Create a service

sudo nano /etc/systemd/system/jupyterlab.service

-- Add this content:

[Unit]
Description=Jupyter Lab Server

[Service]
User=kblancov
Group=kblancov
Type=simple
WorkingDirectory=/home/kblancov/
ExecStart=/home/kblancov/miniconda3/bin/jupyter-lab
StandardOutput=null
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target

-- start the service:

sudo systemctl daemon-reload

sudo systemctl start jupyterlab

sudo systemctl status jupyterlab

-- To stop

sudo systemctl stop jupyterlab

Set to auto start on system start:

sudo systemctl enable jupyterlab



13. Install Git on Ubuntu 20.04

git --version

sudo apt update

git config --global user.name "kblancov"
git config --global user.email "mail@camiloblanco.com"

nano ~/.gitconfig

- Follow: https://webkul.com/blog/github-push-with-two-factor-authentication/

Token from Github:

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

- Configure the SHH

https://www.freecodecamp.org/news/git-ssh-how-to/

-Response:
-- Your identification has been saved in GitHubKbKey
-- Your public key has been saved in GitHubKbKey.pub
-- The key fingerprint is:

-- SHA256:/tf4g8beOzUUmTMk7WkYAYv0UAOVFVaMPO+VIOdq7FY mail@camiloblanco.com

eval "$(ssh-agent -s)"

ssh-add ~/.ssh/GitHubKbKey

cat ~/.ssh/GitHubKbKey.pub


ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCipZ2FsLT0324SdnUygSIzOYLzNjbBnUWdgHJ9rlJljhI1cpOp6qyqDBGkCaqZBCn1Hw2amT/v76SfMejGsGAxjjCCZfacJZxEKI+9NBYhfRrZd7d1F006/87LqranlRd1lIn+swvn8hZj38lpXBIoGqnlJj1e2vuEqx/1M7pe+190qzxY8KCuQimEriuvY2rEWITrAGmp//F9hRM4qjSoEB8a3xapS4grCbLHRd7jGG+XA5faZwRFQdBJIgwJnB2kBJLLoThrw7yVfeNBYc74zmduf6XRRkqEbGG8cyrlMSCJXadV7qjhBm5+iTeivUHkqbZ2ASgHwWN9026/sdjkwBfvqxnfvSMwBE2ttZvlA/hJmZ7g3YtHmG0mnvt8ThMj9TY437Qvw2U+XP5Jj2FgSB6/bOyOTmcCfeBpn9N+6oxFPza1Z7zrqzN/Y7O53aDJJIRBsNWRmWiC8eKF7DoAgRnedr4dqWVxghrNTQ//SHZUnB9WatCJX8zZy8GbPcLJKwlA4r55Xvxr5SYAXA/zvasXlNn+a28L6Zd4pNwX6+QfifIj83KeTqIS616N1kzoukdr8k53WXaUW1EnogpkYuLfFaX7/XTupOpIbfz8mqgQv8cQ5BlXtzq6FkDwkt2KW+PsDb6cXkphBvjBzF+AAigkAYzMLaLKCwLMcTaD/w== mail@camiloblanco.com

- Test the ssh conection

ssh -T git@github.com

git clone  git@github.com:camiloblanco/AlgoTrading.git

git init

git status

git add --all

- change something

git status

git commit -m "First cloud commit"

git remote -v

git push

--- End of scripting

Keep on Rolling...

